using ImageSharp;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.FileProviders;
using OpenCvSharp;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;

namespace Recognizer.Web.Controllers
{
    public class HomeController : Controller
    {
        private IHostingEnvironment _env;
        public HomeController(IHostingEnvironment env)
        {
            this._env = env;
        }

        public IActionResult Index()
        {
            var remoteIpAddress = Request.HttpContext.Connection.RemoteIpAddress;
            var browser = Request.Headers["User-Agent"].ToString();
            var scriptname = Request.Headers["SCRIPT_NAME"].ToString();
            ViewData["IP"] = remoteIpAddress.MapToIPv4().ToString();
            return View();
        }

        [NonAction]
        private double getFps(VideoCapture capture)
        {
            using (var image = new Mat())
            {
                while (true)
                {
                    /* start camera */
                    capture.Read(image);
                    if (!image.Empty())
                    {
                        break;
                    }
                }
            }

            using (var image = new Mat())
            {
                double counter = 0;
                double seconds = 0;
                var watch = Stopwatch.StartNew();
                while (true)
                {
                    capture.Read(image);
                    if (image.Empty())
                    {
                        break;
                    }

                    counter++;
                    seconds = watch.ElapsedMilliseconds / (double)1000;
                    if (seconds >= 3)
                    {
                        watch.Stop();
                        break;
                    }
                }
                var fps = counter / seconds;
                return fps;
            }
        }

        [NonAction]
        public string Run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"C:\Program Files\Anaconda3\python.exe";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                //using (StreamReader reader = process.StandardOutput)
                //{
                //    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                //    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                //    return result;
                //}

                string standard_output;
                while ((standard_output = process.StandardOutput.ReadLine()) != null)
                {
                    if (standard_output.Contains("Model"))
                    {
                        //do something
                        break;
                    }
                }
                process.WaitForExit();
                return standard_output;
            }
        }

        public IActionResult Canny()
        {
            using (var capture = new OpenCvSharp.VideoCapture(CaptureDevice.Any,index:0))
            {
                var fps = getFps(capture);
                capture.Fps = fps;
                var interval = (int)(1000 / fps);

                using (Mat image = new Mat()) // Frame image buffer
                {
                    // When the movie playback reaches end, Mat.data becomes NULL.
                    while (true)
                    {

                        var frame = capture.Read(image);

                        if (image.Empty())
                            break;

                        // Load the cascade
                        var haarCascade = new CascadeClassifier("haarcascade_frontalface_alt2.xml");

                        // Load target image
                        var gray = new Mat("faces.png", ImreadModes.GrayScale);


                        // Detect faces
                        Rect[] faces = haarCascade.DetectMultiScale(gray, 1.08, 2, HaarDetectionType.ScaleImage, new Size(30, 30));




                        //byte[] cannyBytes = cannyImage.ToBytes(".png");
                        //string base64 = Convert.ToBase64String(cannyBytes);
                        //// ビュー変数に設定
                        //ViewBag.Base64Image = base64;

                        //window.ShowImage(image);
                        //Cv2.WaitKey(sleepTime);
                    }
                }

               
            }


            return View();
        }

        [HttpPost]
        public  IActionResult ReceiveImgs(string ip,List<string> sources)
        {
            try
            {
                //https://andrewlock.net/using-imagesharp-to-resize-images-in-asp-net-core-part-4-saving-to-disk/
                ip = ip.Replace('.', '_');
                var webRoot = _env.WebRootPath;
                var PathWithFolderName = System.IO.Path.Combine(webRoot, "data",ip);

                if (!Directory.Exists(PathWithFolderName))
                {
                    // Try to create the directory.
                    DirectoryInfo di = Directory.CreateDirectory(PathWithFolderName);
                }
                //var files = Directory.GetFiles(PathWithFolderName);
                foreach (var source in sources)
                {
                    var base64 = source.Substring(source.IndexOf(',') + 1);
                    base64 = base64.Trim('\0');
                    byte[] imageBytes = Convert.FromBase64String(base64);

                    using (MemoryStream ms = new MemoryStream(imageBytes))
                    {
                        using (Image<Rgba32> image = Image.Load(ms))
                        {
                            image
                                //.Resize(image.Width / 2, image.Height / 2)
                                //.Grayscale()
                                .Save(PathWithFolderName + "/" + DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss_fffff_") + "avatar.jpg"); // automatic encoder selected based on extension.
                        }
                    }
                }
                
                return Json(new { data = true });
            }
            catch (Exception)
            {
                return Json(new {data = false });
            }

        }

        [HttpGet]
        public IActionResult GetFilesCount(string ip)
        {
            ip = ip.Replace('.', '_');
            var webRoot = _env.WebRootPath;
            var PathWithFolderName = System.IO.Path.Combine(webRoot, "data",ip);
            if (!Directory.Exists(PathWithFolderName))
            {
                // Try to create the directory.
                DirectoryInfo di = Directory.CreateDirectory(PathWithFolderName);
            }
            var files = Directory.GetFiles(PathWithFolderName);
            return Json(new { data = true, count = files.Length });

        }

        [HttpPost]
        public IActionResult ExecuteTrain(string ip)
        {
            var webRoot = _env.WebRootPath;
            //var root = Directory.GetParent(_env.ContentRootPath);
            var PathWithScript = Path.Combine(webRoot, "python");
            var PathWithFolderName = Path.Combine(webRoot, "data", ip.Replace('.','_'));

            string result= Run_cmd(PathWithScript + "/train.py", ip.Replace('.', '_'));

            return Json(new {data=result});
        }

        public IActionResult About()
        {
            ViewData["Message"] = "Your application description page.";

            return View();
        }

        public IActionResult Contact()
        {
            ViewData["Message"] = "Your contact page.";

            return View();
        }

        public IActionResult Error()
        {
            return View();
        }
    }
}
